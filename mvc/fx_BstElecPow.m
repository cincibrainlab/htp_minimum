function sFilesPow = fx_BstElecPow(sFilesRecordings, cfg, method)

% Processing Operations
opchoices = cell2table({
    'process_psd_bands', 1, false; ...
    'process_psd_FFT', 2, false; ...
    'tf_norm_multiply2020', 3, false; ...
    'tf_norm_relative2020', 4, false; ...
    'process_ssmooth_surfstat', 5,false ...
    }, 'VariableNames', {'Function', 'ID', 'action'});
opchoices.Properties.RowNames = table2cell(opchoices(:,1));

% Select operations to be performed (order matters)
switch method
    case 'elec_abspow'
        opchoices.action = [true; false; false; false; false];
    case 'elec_abspownorm'
        opchoices.action = [true; false; true; false; false];
        cfg.overwrite = 1;
    case 'elec_relpow'
        opchoices.action = [true; false; false; true; false];
        cfg.overwrite = 1;
    case 'elec_FFTabs'
        opchoices.action = [false; true; false; false; false];
    case 'elec_FFTabsnorm'
        opchoices.action = [false; true; true; false; false];
        cfg.overwrite = 1;
    case 'elec_FFTrel'
        opchoices.action = [false; true; false; true; false];
        cfg.overwrite = 1;
    case 'source_abspow'
        opchoices.action = [true; false; false; false; false];
    case 'source_abspownorm'
        opchoices.action = [true; false; true; false; false];
        sFilesPow = sFilesRecordings; % precalculated
        cfg.overwrite = 1;
    case 'source_relpow'
        opchoices.action = [true; false; false; true; false];
        sFilesPow = sFilesRecordings; % precalculated
        cfg.overwrite = 1;
    case 'source_smooth'
        opchoices.action = [false; false; false; false; true];
        sFilesPow = sFilesRecordings; % precalculated
        cfg.overwrite = 1;
end

if opchoices('process_psd_bands',:).action
    sFilesPow = bst_process('CallProcess', 'process_psd', sFilesRecordings, [], ...
        'timewindow',  cfg.timewindow, ...
        'win_length',  cfg.win_length, ...
        'win_overlap', cfg.win_overlap, ...
        'units',       'physical', ...  % Physical: U2/Hz
        'sensortypes', 'MEG, EEG', ...
        'win_std',     0, ...
        'edit',        struct(...
        'Comment',         'Power,FreqBands', ...
        'TimeBands',       [], ...
        'Freqs',           {cfg.predefinedBands}, ...
        'ClusterFuncTime', 'none', ...
        'Measure',         'power', ...
        'Output',          'all', ...
        'SaveKernel',      0));
    sFilesPow = fx_bstAddTag(sFilesPow, 'abspow');

end

if opchoices('process_psd_FFT',:).action
    sFilesPow = bst_process('CallProcess', 'process_psd', sFilesRecordings, [], ...
        'timewindow',  cfg.timewindow, ...
        'win_length',  cfg.win_length, ...
        'win_overlap', cfg.win_overlap, ...
        'units',       'physical', ...  % Physical: U2/Hz
        'sensortypes', 'MEG, EEG', ...
        'win_std',     0, ...
        'edit',        struct(...
        'Comment',         'Power', ...
        'TimeBands',       [], ...
        'Freqs',           [], ...
        'ClusterFuncTime', 'none', ...
        'Measure',         'power', ...
        'Output',          'all', ...
        'SaveKernel',      0));
    sFilesPow = fx_bstAddTag(sFilesPow, 'absfft');
end

if opchoices('tf_norm_multiply2020',:).action
    % Process: Spectrum normalization
    sFilesPow = bst_process('CallProcess', 'process_tf_norm', sFilesPow, [], ...
        'normalize', 'multiply2020', ...  % 1/f compensation (multiply power by frequency)
        'overwrite', cfg.overwrite);
    sFilesPow = fx_bstAddTag(sFilesPow, 'norm_mult');
    
end

if opchoices('tf_norm_relative2020',:).action
    sFilesPow = bst_process('CallProcess', 'process_tf_norm', sFilesPow, [], ...
        'normalize', 'relative2020', ...  % Relative power (divide by total power)
        'overwrite', cfg.overwrite);
    sFilesPow = fx_bstAddTag(sFilesPow, 'norm_rel');
    
end

if opchoices('process_ssmooth_surfstat',:).action
    cfg.fwhm = 3;
    cfg.overwrite = 1;
    sFilesPow = bst_process('CallProcess', 'process_ssmooth_surfstat', sFilesPow, [], ...
        'fwhm', cfg.fwhm, ...
        'overwrite', cfg.overwrite);
    %sFilesPow = fx_bstAddTag(sFilesPow, 'ssmooth');
end

end